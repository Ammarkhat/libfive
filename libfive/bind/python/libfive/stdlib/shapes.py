"""
Guile bindings to the libfive CAD kernel

DO NOT EDIT BY HAND!
This file is automatically generated from libfive/stdlib/stdlib.h

It was last generated on 2021-02-28 11:22:20 by user mkeeter

This is libfive.stdlib.shapes
"""

from libfive.ffi import libfive_tree, tfloat, tvec2, tvec3, stdlib
from libfive.shape import Shape

import ctypes

stdlib.circle.argtypes = [tfloat, tvec2]
stdlib.circle.restype = libfive_tree
def circle(r, center=(0, 0)):
    """ A 2D circle with the given radius and optional center
    """
    return Shape.wrap(stdlib.circle(
        Shape.wrap(r).ptr,
        tvec2(*[Shape.wrap(i).ptr for i in center])))

stdlib.ring.argtypes = [tfloat, tfloat, tvec2]
stdlib.ring.restype = libfive_tree
def ring(ro, ri, center=(0, 0)):
    """ A 2D ring with the given outer/inner radii and optional center
    """
    return Shape.wrap(stdlib.ring(
        Shape.wrap(ro).ptr,
        Shape.wrap(ri).ptr,
        tvec2(*[Shape.wrap(i).ptr for i in center])))

stdlib.polygon.argtypes = [tfloat, ctypes.c_int, tvec2]
stdlib.polygon.restype = libfive_tree
def polygon(r, n, center=(0, 0)):
    """ A polygon with center-to-vertex distance r and n sides
    """
    return Shape.wrap(stdlib.polygon(
        Shape.wrap(r).ptr,
        n,
        tvec2(*[Shape.wrap(i).ptr for i in center])))

stdlib.rectangle.argtypes = [tvec2, tvec2]
stdlib.rectangle.restype = libfive_tree
def rectangle(a, b):
    """ A rectangle with the given bounding corners
    """
    return Shape.wrap(stdlib.rectangle(
        tvec2(*[Shape.wrap(i).ptr for i in a]),
        tvec2(*[Shape.wrap(i).ptr for i in b])))

stdlib.rounded_rectangle.argtypes = [tvec2, tvec2, tfloat]
stdlib.rounded_rectangle.restype = libfive_tree
def rounded_rectangle(a, b, r):
    """ A rectangle with rounded corners
    """
    return Shape.wrap(stdlib.rounded_rectangle(
        tvec2(*[Shape.wrap(i).ptr for i in a]),
        tvec2(*[Shape.wrap(i).ptr for i in b]),
        Shape.wrap(r).ptr))

stdlib.rectangle_exact.argtypes = [tvec2, tvec2]
stdlib.rectangle_exact.restype = libfive_tree
def rectangle_exact(a, b):
    """ A rectangle from an exact distance field
    """
    return Shape.wrap(stdlib.rectangle_exact(
        tvec2(*[Shape.wrap(i).ptr for i in a]),
        tvec2(*[Shape.wrap(i).ptr for i in b])))

stdlib.rectangle_centered_exact.argtypes = [tvec2, tvec2]
stdlib.rectangle_centered_exact.restype = libfive_tree
def rectangle_centered_exact(size, center=(0, 0)):
    """ An exact-field rectangle at the (optional) center
    """
    return Shape.wrap(stdlib.rectangle_centered_exact(
        tvec2(*[Shape.wrap(i).ptr for i in size]),
        tvec2(*[Shape.wrap(i).ptr for i in center])))

stdlib.triangle.argtypes = [tvec2, tvec2, tvec2]
stdlib.triangle.restype = libfive_tree
def triangle(a, b, c):
    """ A 2D triangle
    """
    return Shape.wrap(stdlib.triangle(
        tvec2(*[Shape.wrap(i).ptr for i in a]),
        tvec2(*[Shape.wrap(i).ptr for i in b]),
        tvec2(*[Shape.wrap(i).ptr for i in c])))

stdlib.box_mitered.argtypes = [tvec3, tvec3]
stdlib.box_mitered.restype = libfive_tree
def box_mitered(a, b):
    """ A box with the given bounds, which will stay creased if offset
    """
    return Shape.wrap(stdlib.box_mitered(
        tvec3(*[Shape.wrap(i).ptr for i in a]),
        tvec3(*[Shape.wrap(i).ptr for i in b])))

stdlib.box_mitered_centered.argtypes = [tvec3, tvec3]
stdlib.box_mitered_centered.restype = libfive_tree
def box_mitered_centered(size, center=(0, 0, 0)):
    """ A box with the given size and (optional) center, with edges that
        will stay sharp if offset.
    """
    return Shape.wrap(stdlib.box_mitered_centered(
        tvec3(*[Shape.wrap(i).ptr for i in size]),
        tvec3(*[Shape.wrap(i).ptr for i in center])))

stdlib.box_exact_centered.argtypes = [tvec3, tvec3]
stdlib.box_exact_centered.restype = libfive_tree
def box_exact_centered(size, center=(0, 0, 0)):
    """ A box with the given size, centered around the given point,
        with a Euclidean distance metric
    """
    return Shape.wrap(stdlib.box_exact_centered(
        tvec3(*[Shape.wrap(i).ptr for i in size]),
        tvec3(*[Shape.wrap(i).ptr for i in center])))

stdlib.box_exact.argtypes = [tvec3, tvec3]
stdlib.box_exact.restype = libfive_tree
def box_exact(a, b):
    """ A box with the given bounds with a Euclidean distance metric
    """
    return Shape.wrap(stdlib.box_exact(
        tvec3(*[Shape.wrap(i).ptr for i in a]),
        tvec3(*[Shape.wrap(i).ptr for i in b])))

stdlib.rounded_box.argtypes = [tvec3, tvec3, tfloat]
stdlib.rounded_box.restype = libfive_tree
def rounded_box(a, b, r):
    """ Rounded box with the given bounds and radius (as a 0-1 fraction)
    """
    return Shape.wrap(stdlib.rounded_box(
        tvec3(*[Shape.wrap(i).ptr for i in a]),
        tvec3(*[Shape.wrap(i).ptr for i in b]),
        Shape.wrap(r).ptr))

stdlib.sphere.argtypes = [tfloat, tvec3]
stdlib.sphere.restype = libfive_tree
def sphere(radius, center=(0, 0, 0)):
    """ A sphere with the given radius and (optional) center
    """
    return Shape.wrap(stdlib.sphere(
        Shape.wrap(radius).ptr,
        tvec3(*[Shape.wrap(i).ptr for i in center])))

stdlib.half_space.argtypes = [tvec3, tvec3]
stdlib.half_space.restype = libfive_tree
def half_space(norm, point=(0, 0, 0)):
    """ A plane which divides the world into inside and outside, defined by its
        normal and a single point on the plane
    """
    return Shape.wrap(stdlib.half_space(
        tvec3(*[Shape.wrap(i).ptr for i in norm]),
        tvec3(*[Shape.wrap(i).ptr for i in point])))

stdlib.cylinder_z.argtypes = [tfloat, tfloat, tvec3]
stdlib.cylinder_z.restype = libfive_tree
def cylinder_z(r, h, base=(0, 0, 0)):
    """ A cylinder with the given radius and height, extruded from the
        (optional) base position.
    """
    return Shape.wrap(stdlib.cylinder_z(
        Shape.wrap(r).ptr,
        Shape.wrap(h).ptr,
        tvec3(*[Shape.wrap(i).ptr for i in base])))

stdlib.cone_ang_z.argtypes = [tfloat, tfloat, tvec3]
stdlib.cone_ang_z.restype = libfive_tree
def cone_ang_z(angle, height, base=(0, 0, 0)):
    """ A cone defined by its slope angle, height, and (optional) base location
    """
    return Shape.wrap(stdlib.cone_ang_z(
        Shape.wrap(angle).ptr,
        Shape.wrap(height).ptr,
        tvec3(*[Shape.wrap(i).ptr for i in base])))

stdlib.cone_z.argtypes = [tfloat, tfloat, tvec3]
stdlib.cone_z.restype = libfive_tree
def cone_z(radius, height, base=(0, 0, 0)):
    """ A cone defined by its radius, height, and (optional) base location
    """
    return Shape.wrap(stdlib.cone_z(
        Shape.wrap(radius).ptr,
        Shape.wrap(height).ptr,
        tvec3(*[Shape.wrap(i).ptr for i in base])))

stdlib.pyramid_z.argtypes = [tvec2, tvec2, tfloat, tfloat]
stdlib.pyramid_z.restype = libfive_tree
def pyramid_z(a, b, zmin, height):
    """ A pyramid defined by its base rectangle, lower Z value, and height
    """
    return Shape.wrap(stdlib.pyramid_z(
        tvec2(*[Shape.wrap(i).ptr for i in a]),
        tvec2(*[Shape.wrap(i).ptr for i in b]),
        Shape.wrap(zmin).ptr,
        Shape.wrap(height).ptr))

stdlib.torus_z.argtypes = [tfloat, tfloat, tvec3]
stdlib.torus_z.restype = libfive_tree
def torus_z(ro, ri, center=(0, 0, 0)):
    """ A torus with the given outer radius, inner radius, and (optional) center
    """
    return Shape.wrap(stdlib.torus_z(
        Shape.wrap(ro).ptr,
        Shape.wrap(ri).ptr,
        tvec3(*[Shape.wrap(i).ptr for i in center])))

stdlib.gyroid.argtypes = [tvec3, tfloat]
stdlib.gyroid.restype = libfive_tree
def gyroid(period, thickness):
    """ A volume-filling gyroid with the given periods and thickness
    """
    return Shape.wrap(stdlib.gyroid(
        tvec3(*[Shape.wrap(i).ptr for i in period]),
        Shape.wrap(thickness).ptr))

stdlib.array_x.argtypes = [libfive_tree, ctypes.c_int, tfloat]
stdlib.array_x.restype = libfive_tree
def array_x(shape, nx, dx):
    """ Iterates a part in a 1D array
    """
    return Shape.wrap(stdlib.array_x(
        Shape.wrap(shape).ptr,
        nx,
        Shape.wrap(dx).ptr))

stdlib.array_xy.argtypes = [libfive_tree, ctypes.c_int, ctypes.c_int, tvec2]
stdlib.array_xy.restype = libfive_tree
def array_xy(shape, nx, ny, delta):
    """ Iterates a part in a 2D array
    """
    return Shape.wrap(stdlib.array_xy(
        Shape.wrap(shape).ptr,
        nx,
        ny,
        tvec2(*[Shape.wrap(i).ptr for i in delta])))

stdlib.array_xyz.argtypes = [libfive_tree, ctypes.c_int, ctypes.c_int, ctypes.c_int, tvec3]
stdlib.array_xyz.restype = libfive_tree
def array_xyz(shape, nx, ny, nz, delta):
    """ Iterates a part in a 3D array
    """
    return Shape.wrap(stdlib.array_xyz(
        Shape.wrap(shape).ptr,
        nx,
        ny,
        nz,
        tvec3(*[Shape.wrap(i).ptr for i in delta])))

stdlib.array_polar_z.argtypes = [libfive_tree, ctypes.c_int, tvec2]
stdlib.array_polar_z.restype = libfive_tree
def array_polar_z(shape, n, center=(0, 0)):
    """ Iterates a shape about an optional center position
    """
    return Shape.wrap(stdlib.array_polar_z(
        Shape.wrap(shape).ptr,
        n,
        tvec2(*[Shape.wrap(i).ptr for i in center])))

stdlib.extrude_z.argtypes = [libfive_tree, tfloat, tfloat]
stdlib.extrude_z.restype = libfive_tree
def extrude_z(t, zmin, zmax):
    """ Extrudes a 2D shape between zmin and zmax
    """
    return Shape.wrap(stdlib.extrude_z(
        Shape.wrap(t).ptr,
        Shape.wrap(zmin).ptr,
        Shape.wrap(zmax).ptr))

cube = box_mitered
box = box_mitered
box_centered = box_mitered_centered
rounded_cube = rounded_box
cylinder = cylinder_z
cone_ang = cone_ang_z
cone = cone_z
torus = torus_z
array_polar = array_polar_z