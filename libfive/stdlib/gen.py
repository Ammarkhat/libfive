import os
from datetime import datetime

import parse

def arg_type(a):
    return {'libfive_tree':"'*",
            'vec3': '(list float float float)',
            'vec4': '(list float float float)',
            'float': '(float)'}[a.type]

def arg_call(a):
    if a.type == 'libfive_tree':
        return '(shape->ptr %s)' % a.name
    elif a.type == 'float':
        return a.name
    elif a.type == 'vec2':
        return '(vec2->ffi %s)' % a.name
    elif a.type == 'vec3':
        return '(vec3->ffi %s)' % a.name
    else:
        raise RuntimeError("Unknown type %s" % a.type)

def run(lib):
    out = '''#|
Guile bindings to the libfive CAD kernel

DO NOT EDIT BY HAND!
This file is automatically generated from libfive/stdlib/stdlib.h

It was last generated on {} by user {}
|#

(use-modules (system foreign) (libfive kernel) (libfive vec))

(define stdlib (dynamic-link "libfive-stdlib"))

'''.format(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), os.getlogin())

    for module in ['csg']:
        for f in lib[module].shapes:
            arg_types = " ".join(map(arg_type, f.args))
            arg_names = " ".join([a.name for a in f.args])
            arg_calls = " ".join(map(arg_call, f.args))
            s = '''(define ffi_{0} (pointer->procedure '*
  (dynamic-func "{0}" stdlib)
  (list {arg_types})))
(define-public ({0} {arg_names})
  {doc}
  (ptr->shape (ffi_{0} {arg_calls})))

'''.format(f.name.replace('_', '-'), doc='" ' + f.docstring.replace('\n', '\n    ') + '"', arg_types=arg_types, arg_names=arg_names, arg_calls=arg_calls)
            out += s
        return out[:-1]

print(run(parse.parse_stdlib()))
